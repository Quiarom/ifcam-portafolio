---
import '../styles/components/hero-section.css';
import LogosRow from './LogosRow.astro';

interface Props {
  title: string;
  subtitle?: string;
  showProfile?: boolean;
  showCTA?: boolean;
  ctaHref?: string;
  ctaText?: string;
}

const { 
  title, 
  subtitle, 
  showProfile = false, 
  showCTA = false, 
  ctaText = "¡Hablemos!", 
  ctaHref = "/about" 
} = Astro.props;
---

<section class="hero-section" transition:name="hero-section">
  <!-- Background Image with Overlay -->
  <div class="hero-background">
    <img
      src="https://www.asilodigital.com/content/images/size/w1000/2025/07/Overlay--1-.png"
      alt="Technology Background"
      class=""
    />
    <div class="hero-overlay"></div>
  </div>

  <!-- Hero Content -->
  <div class="hero-content">
    
    <!-- Profile Section (only on home) -->
    {showProfile && (
      <div class="hero-profile">
        <img
          src="avatar.jpg"
          alt="Melvin Vivas"
          class="hero-profile-image"
        />
        <div class="hero-profile-info">
          <h3>Isaac Fernández</h3>
          <div class="hero-profile-social">
            <a href="https://github.com/donvito" aria-label="GitHub">
              <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 18 18" fill="none">
  <path d="M11.25 2.625H6.75C4.47183 2.625 2.625 4.47183 2.625 6.75V11.25C2.625 13.5282 4.47183 15.375 6.75 15.375H11.25C13.5282 15.375 15.375 13.5282 15.375 11.25V6.75C15.375 4.47183 13.5282 2.625 11.25 2.625Z" stroke="#FBFBFB" stroke-width="1.125" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M9.00003 11.7044C10.4937 11.7044 11.7045 10.4936 11.7045 8.99991C11.7045 7.50626 10.4937 6.29541 9.00003 6.29541C7.50638 6.29541 6.29553 7.50626 6.29553 8.99991C6.29553 10.4936 7.50638 11.7044 9.00003 11.7044Z" stroke="#FBFBFB" stroke-width="1.125" stroke-linecap="round" stroke-linejoin="round"/>
  <path d="M12.6705 6.10213C13.0971 6.10213 13.443 5.75627 13.443 5.32963C13.443 4.90299 13.0971 4.55713 12.6705 4.55713C12.2439 4.55713 11.898 4.90299 11.898 5.32963C11.898 5.75627 12.2439 6.10213 12.6705 6.10213Z" fill="#FBFBFB"/>
</svg>
            </a>
            <a href="https://x.com/donvito" aria-label="Twitter">
              <svg fill="currentColor" viewBox="0 0 24 24">
                <path d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"/>
              </svg>
            </a>
            <a href="https://www.linkedin.com/in/melvinvivas/" aria-label="LinkedIn">
              <svg fill="currentColor" viewBox="0 0 24 24">
                <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"/>
              </svg>
            </a>
          </div>
        </div>
      </div>
    )}

    <!-- Main Content -->
    <div class={`hero-main ${!showProfile ? 'no-profile' : ''}`}>
      <h1 class="hero-title" transition:name="hero-title">
        {title}
      </h1>
      {subtitle && (
        <p class="hero-subtitle" transition:name="hero-subtitle">
          {subtitle}
        </p>
      )}
      {showCTA && (
        <a 
          href={ctaHref}
          class="hero-cta"
          transition:name="hero-cta"
        >
          {ctaText}
        </a>
      )}
    </div>

    <!-- Clients Section (only on home) -->
    {showProfile && ( 
      <LogosRow />
    )}
  </div>
</section>

{showProfile && (
  <script>
    // Logo Carousel with Infinite Loop using JavaScript
    function initializeLogoCarousel() {
      const carousel = document.getElementById('logoCarousel');
      if (!carousel) return;

      // Logo data
      const logos = [
        'MATTELSA',
        'Gama', 
        'MINVERSO',
        'ITGlobers',
        'Alien',
        'CRT'
      ];

      // Configuration
      const logoWidth = 120;
      const gap = 32;
      const itemWidth = logoWidth + gap;
      const animationSpeed = 0.8; // Smooth speed

      // State
      let translateX = 0;
      let animationId;
      let isAnimating = false;
      let clonedSets = 0;
      let scrollWidth = 0;

      // Create logo elements
      function createLogoElement(text) {
        const logoDiv = document.createElement('div');
        logoDiv.className = 'logo-item';
        logoDiv.style.width = `${logoWidth}px`;
        logoDiv.style.height = '64px';
        logoDiv.style.flexShrink = '0';
        logoDiv.style.display = 'flex';
        logoDiv.style.alignItems = 'center';
        logoDiv.style.justifyContent = 'center';
        logoDiv.style.background = 'rgba(255, 255, 255, 0.1)';
        logoDiv.style.backdropFilter = 'blur(4px)';
        logoDiv.style.borderRadius = '8px';
        logoDiv.style.transition = 'transform 0.3s ease';
        logoDiv.style.cursor = 'pointer';
        logoDiv.style.marginRight = `${gap}px`;
        logoDiv.innerHTML = `<span class="text-white text-sm font-medium">${text}</span>`;
        
        // Add hover effect
        logoDiv.addEventListener('mouseenter', () => {
          logoDiv.style.transform = 'scale(1.1)';
        });
        
        logoDiv.addEventListener('mouseleave', () => {
          logoDiv.style.transform = 'scale(1)';
        });
        
        return logoDiv;
      }

      // Calculate how many sets we need based on viewport
      function calculateRequiredSets() {
        const viewportWidth = carousel.parentElement.offsetWidth;
        const setsNeeded = Math.ceil(viewportWidth / (logos.length * itemWidth)) + 2; // +2 for buffer
        return Math.max(3, setsNeeded); // Minimum 3 sets
      }

      // Populate carousel with cloned sets for infinite scroll
      function populateCarousel() {
        carousel.innerHTML = '';
        clonedSets = calculateRequiredSets();
        for (let set = 0; set < clonedSets; set++) {
          logos.forEach(logo => {
            carousel.appendChild(createLogoElement(logo));
          });
        }
        // Set initial carousel styles
        carousel.style.display = 'flex';
        carousel.style.alignItems = 'center';
        carousel.style.willChange = 'transform';
        carousel.style.transform = 'translateX(0px)';
        // Calculate total scrollable width
        scrollWidth = clonedSets * logos.length * itemWidth;
      }

      // Animate carousel
      function animateCarousel() {
        if (!isAnimating) return;
        translateX -= animationSpeed;
        // Reset position only after full scrollWidth has passed
        if (Math.abs(translateX) >= scrollWidth / 2) {
          translateX = 0;
        }
        carousel.style.transform = `translateX(${translateX}px)`;
        animationId = requestAnimationFrame(animateCarousel);
      }

      // Start animation
      function startAnimation() {
        if (!isAnimating) {
          isAnimating = true;
          animateCarousel();
        }
      }

      // Stop animation
      function stopAnimation() {
        if (animationId) {
          cancelAnimationFrame(animationId);
          animationId = null;
        }
        isAnimating = false;
      }
      
      // Handle resize to recalculate sets if needed
      function handleResize() {
        const currentSets = carousel.children.length / logos.length;
        const requiredSets = calculateRequiredSets();
        if (requiredSets !== currentSets) {
          const wasAnimating = isAnimating;
          stopAnimation();
          populateCarousel();
          if (wasAnimating) {
            startAnimation();
          }
        } else {
          // recalculate scrollWidth in case of minor resize
          scrollWidth = clonedSets * logos.length * itemWidth;
        }
      }
      
      
      // Initialize
      populateCarousel();
      
      // Start animation automatically
      startAnimation();

      // Pause animation on hover
      carousel.addEventListener('mouseenter', () => {
        stopAnimation();
      });

      carousel.addEventListener('mouseleave', () => {
        startAnimation();
      });

      // Handle visibility change to pause when tab is not active
      document.addEventListener('visibilitychange', () => {
        if (document.hidden) {
          stopAnimation();
        } else {
          startAnimation();
        }
      });
      
      // Handle window resize
      let resizeTimeout;
      window.addEventListener('resize', () => {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(handleResize, 250);
      });
      
      // Cleanup function
      return () => {
        stopAnimation();
        window.removeEventListener('resize', handleResize);
      };
    }

    function initializeCarousel() {
      initializeLogoCarousel();
    }

    // Initialize when DOM is ready
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', initializeCarousel);
    } else {
      initializeCarousel();
    }

    // Re-initialize after view transitions
    document.addEventListener('astro:after-swap', initializeCarousel);
  </script>
)}