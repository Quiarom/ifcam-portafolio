---
import Layout from '../../layouts/Layout.astro';
import HeroSection from '../../components/HeroSection.astro';
import { getCollection } from 'astro:content';

const portfolioPosts = await getCollection('portfolio');
const sortedPosts = portfolioPosts.sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf());
const sortedPortfolio = portfolioPosts.sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf()).slice(0, 6);

// Get unique categories
const allCategories = [...new Set(portfolioPosts.flatMap(post => post.data.categories || []))].sort();

// Function to calculate reading time
function calculateReadingTime(content: string): number {
  const wordsPerMinute = 200;
  const words = content.split(/\s+/).length;
  return Math.ceil(words / wordsPerMinute);
}
---

<Layout title="Portfolio - Isaac FernÃ¡ndez">
  <!-- Hero Section -->
  <HeroSection 
    title="Portfolio"
    subtitle="Explore my latest projects showcasing AI-powered solutions, full-stack development, and innovative web applications."
    showProfile={false}
    showCTA={false}
  />

 <section class="py-10 home-background pb-20">
    <div class="flex flex-col mx-16">
      <!-- Section Header -->
      <div class="mb-4">
        <h2 class="text-3xl lg:text-4xl text-left font-bold text-gray-900 dark:text-white mb-6">
          Mis proyectos
        </h2>
        
        <!-- Filter Tags -->
        <div class="flex flex-wrap gap-3 mb-8">
          <button class="filter-btn active px-6 py-2 rounded-full text-sm font-medium bg-white text-gray-900 border-2 border-gray-300">
            All
          </button>
          <button class="filter-btn px-6 py-2 rounded-full text-sm font-medium bg-transparent text-[#E0E0E0] border-2 border-white/30 hover:bg-white/10 transition-colors" data-category="Product Design UX/UI">
            Product Design UX/UI
          </button>
          <button class="filter-btn px-6 py-2 rounded-full text-sm font-medium bg-transparent text-[#E0E0E0] border-2 border-white/30 hover:bg-white/10 transition-colors" data-category="Vibe Coding">
            Vibe coding
          </button>
          <button class="filter-btn px-6 py-2 rounded-full text-sm font-medium bg-transparent text-[#E0E0E0] border-2 border-white/30 hover:bg-white/10 transition-colors" data-category="Consulting">
            Consulting
          </button>
        </div>
      </div>

      <!-- Projects Grid - 2 columns x 3 rows -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {
          sortedPortfolio.map((post, index) => {
            const categories = post.data.categories || [];
            return (
            <article class="project-item group" data-categories={JSON.stringify(categories)}>
              <a href={`/portfolio/${post.slug}`} class="block">
                {/* Project Image - Rectangular without borders */}
                {post.data.image && (
                  <div class="relative overflow-hidden rounded-lg mb-6">
                    <img
                      src={post.data.image.src}
                      alt={post.data.image.alt}
                      class="w-full h-64 lg:h-80 object-cover transition-transform duration-500 group-hover:scale-105"
                    />
                    <div class="absolute inset-0 bg-black/0 group-hover:bg-black/10 transition-colors duration-300"></div>
                  </div>
                )}
                
                {/* Project Info */}
                <div class="space-y-3">
                  <div class="flex items-center gap-3">
                    <h3 class="text-xl font-bold text-gray-900 dark:text-white group-hover:text-accent-light dark:group-hover:text-accent-dark transition-colors">
                      {post.data.title}
                    </h3>
                    <img src="images/dot.svg" alt="Dot" class="w-2 h-4 mt-1" />
                    <span class="text-lg text-gray-500 dark:text-gray-400">
                      {post.data.publishDate.getFullYear()}
                    </span>
                  </div>
                  
                  <p class="text-gray-600 dark:text-gray-400 leading-relaxed">
                    {post.data.description}
                  </p>
                </div>
              </a>
            </article>
          )})
        }
      </div>
    </div>
  </section>
</Layout>

<style>
  .portfolio-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1.5rem 6rem;
  }

  @media (min-width: 1024px) {
    .portfolio-container {
      padding: 2rem 2rem 6rem;
    }
  }

  /* Portfolio Grid */
  .portfolio-grid {
    display: grid;
    grid-template-columns: 1fr;
    gap: 3rem;
    margin-bottom: 4rem;
  }

  @media (min-width: 1024px) {
    .portfolio-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 2rem;
    }
  }
  .portfolio-image {
    aspect-ratio: 16 / 9;
    overflow: hidden;
    border-radius: 0.75rem;
    margin-bottom: 1.5rem;
    background-color: #f3f4f6;
  }

  .image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .portfolio-item:hover .image {
    transform: scale(1.05);
  }

  .portfolio-content {
    padding: 0 0.25rem;
  }

  .portfolio-item-title {
    font-size: 1.25rem;
    font-weight: 600;
    color: #111827;
    margin-bottom: 1rem;
    line-height: 1.4;
    transition: color 0.2s ease;
  }

  @media (min-width: 1024px) {
    .portfolio-item-title {
      font-size: 1.5rem;
    }
  }

  .portfolio-item:hover .portfolio-item-title {
    color: #2563eb;
  }

  .portfolio-metadata {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 1rem;
    flex-wrap: wrap;
  }

  .metadata-item {
    font-size: 0.875rem;
    color: #6b7280;
  }

  .metadata-separator {
    font-size: 0.875rem;
    color: #d1d5db;
  }

  .portfolio-description {
    font-size: 1rem;
    color: #4b5563;
    line-height: 1.6;
    margin: 0;
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .portfolio-item-title {
      color: #f9fafb;
    }

    .blog-subtitle {
      color: #9ca3af;
    }

    .portfolio-description {
      color: #d1d5db;
    }
    .blog-title {
      color: #f9fafb;
    }

    .blog-section {
      border-color: #374151;
    }

    .portfolio-image {
      background-color: #374151;
    }
  }

  /* Dark mode class-based */
  :global(.dark) .portfolio-item-title {
    color: #f9fafb;
  }

  :global(.dark) .blog-subtitle {
    color: #9ca3af;
  }

  :global(.dark) .portfolio-description {
    color: #d1d5db;
  }

  :global(.dark) .filter-btn {
    color: #f9fafb;
    border-color: #4b5563;
  }

  :global(.dark) .filter-btn:hover {
    background-color: #374151;
    border-color: #6b7280;
  }

  :global(.dark) .filter-btn.active {
    background-color: #f9fafb;
    color: #111827;
    border-color: #f9fafb;
  }

  :global(.dark) .filter-btn.active:hover {
    background-color: #e5e7eb;
  }

  :global(.dark) .blog-title {
    color: #f9fafb;
  }

  :global(.dark) .blog-section {
    border-color: #374151;
  }

  :global(.dark) .portfolio-image {
    background-color: #374151;
  }

  :global(.dark) .portfolio-item:hover .portfolio-item-title {
    color: #60a5fa;
  }

  :global(.dark) .metadata-category {
    color: #60a5fa;
  }

  /* Project Section Styles */
  .filter-btn.active { background-color: white !important; color: #1f2937 !important; border-color: white !important; }
  .filter-btn:not(.active) { background-color: transparent; color: white; border-color: rgba(255, 255, 255, 0.3); }
  .project-item { transition: transform 0.3s ease; }
  .project-item:hover { transform: translateY(-5px); }
</style>

<script>
  // Filter functionality
  function initializeFilters() {
    const filterBtns = document.querySelectorAll('.filter-btn');
    const projectItems = document.querySelectorAll('.project-item');

    filterBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const category = btn.getAttribute('data-category') || 'all';
        
        // Remove active class from all buttons
        filterBtns.forEach(b => {
          b.classList.remove('active');
        });

        // Add active class to clicked button
        btn.classList.add('active');

        // Filter projects based on category
        projectItems.forEach(item => {
          if (category === 'all') {
            (item as HTMLElement).style.display = 'block';
          } else {
            const itemCategories = JSON.parse(item.getAttribute('data-categories') || '[]');
            if (itemCategories.includes(category)) {
              (item as HTMLElement).style.display = 'block';
            } else {
              (item as HTMLElement).style.display = 'none';
            }
          }
        });
      });
    });
  }

  // Mobile menu functionality
  function initializeMobileMenu() {
    const mobileMenuBtn = document.getElementById('mobileMenuBtn');
    const mobileMenu = document.getElementById('mobileMenu');

    mobileMenuBtn?.addEventListener('click', () => {
      mobileMenu?.classList.toggle('hidden');
    });
  }

  // Initialize all functionality when DOM is ready
  function initializeAll() {
    initializeFilters();
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeAll);
  } else {
    initializeAll();
  }

  // Re-initialize after view transitions
  document.addEventListener('astro:after-swap', initializeAll);
</script>