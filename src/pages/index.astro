---
import '../styles/pages/home.css';
import Layout from '../layouts/Layout.astro';
import HeroSection from '../components/HeroSection.astro';
import Accordion from '../components/Accordion.astro';
import Footer from '../components/Footer.astro';
import { getCollection } from 'astro:content';

import {Image} from 'astro:assets';
import dot from '../assets/dot.png';

const portfolioPosts = await getCollection('portfolio');
const sortedPortfolio = portfolioPosts.sort((a, b) => b.data.publishDate.valueOf() - a.data.publishDate.valueOf()).slice(0, 6);
---

<Layout title="Isaac Fernández - UX / UI Designer Portafolio">
  <!-- Hero Section -->
  <HeroSection 
    title="I design websites that captivate, convert and elevate your brand."
    showProfile={true}
    showCTA={true}
    ctaText="¡Hablemos!"
    ctaHref="/about"
  />

  <!-- Projects Section -->
  <section class="py-10 home-background pb-20">
    <div class="flex flex-col mx-16">
      <!-- Section Header -->
      <div class="mb-4">
        <h2 class="text-3xl lg:text-4xl text-left font-bold text-gray-900 dark:text-white mb-6">
          My projects
        </h2>
        
        <!-- Filter Tags -->
        <div class="flex flex-wrap gap-3 mb-8">
          <button class="filter-btn active px-6 py-2 rounded-full text-sm font-medium bg-white text-gray-900 border-2 border-gray-300">
            All
          </button>
          <button class="filter-btn px-6 py-2 rounded-full text-sm font-medium bg-transparent text-[#BABABA] border-2 border-white/30 hover:bg-white/10 transition-colors" data-category="Product Design UX/UI">
            Product Design UX/UI
          </button>
          <button class="filter-btn px-6 py-2 rounded-full text-sm font-medium bg-transparent text-[#BABABA] border-2 border-white/30 hover:bg-white/10 transition-colors" data-category="Vibe Coding">
            Vibe coding
          </button>
          <button class="filter-btn px-6 py-2 rounded-full text-sm font-medium bg-transparent text-[#BABABA] border-2 border-white/30 hover:bg-white/10 transition-colors" data-category="Consulting">
            Consulting
          </button>
        </div>
      </div>

      <!-- Projects Grid - 2 columns x 3 rows -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {
          sortedPortfolio.map((post, index) => {
            const categories = post.data.categories || [];
            return (
            <article class="project-item group" data-categories={JSON.stringify(categories)}>
              <a href={`/portfolio/${post.id}`} class="block">
                {/* Project Image - Rectangular without borders */}
                {post.data.image && (
                  <div class="relative overflow-hidden rounded-lg mb-6">
                    <img
                      src={post.data.image.src}
                      alt={post.data.image.alt}
                      class="w-full h-64 lg:h-80 object-cover transition-transform duration-500 group-hover:scale-105"
                    />
                    <div class="absolute inset-0 bg-black/0 group-hover:bg-black/10 transition-colors duration-300"></div>
                  </div>
                )}
                
                {/* Project Info */}
                <div class="space-y-3">
                  <div class="flex items-center gap-3">
                    <h3 class="text-xl font-bold text-gray-900 dark:text-white group-hover:text-accent-light dark:group-hover:text-gray-300 transition-colors">
                      {post.data.title}
                    </h3>
                    <img src="images/dot.svg" alt="Dot" class="w-2 h-4 mt-1" />
                    <span class="text-lg text-gray-500 dark:text-gray-400">
                      {post.data.publishDate.getFullYear()}
                    </span>
                  </div>
                  
                  <p class="text-gray-600 dark:text-gray-400 leading-relaxed">
                    {post.data.description}
                  </p>
                </div>
              </a>
            </article>
          )})
        }
      </div>
    </div>
    <Accordion class="mt-10" />
  </section>

  <Footer/>
</Layout>

<style>
  .filter-btn.active { background-color: white !important; color: #1f2937 !important; border-color: white !important; }
  .filter-btn:not(.active) { background-color: transparent; color: #E0E0E0; border-color: rgba(255, 255, 255, 0.3); }
  .project-item { transition: transform 0.3s ease; }
  .project-item:hover { transform: translateY(-5px); }
</style>

<script>
  // Filter functionality
  function initializeFilters() {
    const filterBtns = document.querySelectorAll('.filter-btn');
    const projectItems = document.querySelectorAll('.project-item');

    filterBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        const category = btn.getAttribute('data-category') || 'all';
        
        // Remove active class from all buttons
        filterBtns.forEach(b => {
          b.classList.remove('active');
        });

        // Add active class to clicked button
        btn.classList.add('active');

        // Filter projects based on category
        projectItems.forEach(item => {
          if (category === 'all') {
            (item as HTMLElement).style.display = 'block';
          } else {
            const itemCategories = JSON.parse(item.getAttribute('data-categories') || '[]');
            if (itemCategories.includes(category)) {
              (item as HTMLElement).style.display = 'block';
            } else {
              (item as HTMLElement).style.display = 'none';
            }
          }
        });
      });
    });
  }

  // Mobile menu functionality
  function initializeMobileMenu() {
    const mobileMenuBtn = document.getElementById('mobileMenuBtn');
    const mobileMenu = document.getElementById('mobileMenu');

    mobileMenuBtn?.addEventListener('click', () => {
      mobileMenu?.classList.toggle('hidden');
    });
  }

  // Initialize all functionality when DOM is ready
  function initializeAll() {
    initializeFilters();
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeAll);
  } else {
    initializeAll();
  }

  // Re-initialize after view transitions
  document.addEventListener('astro:after-swap', initializeAll);
</script>